name: Deploy API Flask

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: self-hosted  # Usar un runner self-hosted
    permissions:
      contents: read  # Permite leer los contenidos del repositorio
      pull-requests: write  # Permite interactuar con los pull requests

    steps:
    - name: Parar servicio de la API
      run: |
        sudo systemctl stop flask-api || true  # Detener el servicio de la API si ya está corriendo
    - name: Remove __pycache__ directory
      run: |
        sudo rm -rf /home/brunolb/actions-runner/_work/iacasa/iacasa/* || true
    - name: Checkout código
      uses: actions/checkout@v2

    - name: Configurar Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.12'  # Ajustar a la versión de Python que necesitas

    - name: Instalar dependencias
      run: |
        id 
        python -m venv venv
        source venv/bin/activate
        pip install --upgrade pip  
        pip install -r requirements.txt  # Instalar las dependencias de Flask

    - name: Configurar variables de entorno
      run: |
        echo "FLASK_ENV=production" >> $GITHUB_ENV  # Establecer el entorno de Flask, si es necesario
    - name: Matamos el proceso de la API si ya está corriendo
      run: |
        kill $(ps aux | grep 'app.py' | awk '{print $2}') || true # Matar el proceso de la API si ya está corriendo
        

    - name: Copiar y gestionar permisos del script de ejecución
      run: |
        sudo rm /opt/run.sh || true  # Eliminar el script de ejecución si ya existe
        sudo cp run.sh /opt/run.sh
        sudo chmod 777 /opt/run.sh
        sleep 5  # Esperar a que la API se levante

    - name: Levantar la API
      run: |
        sudo systemctl stop flask-api  # Detener el servicio de la API
        sudo systemctl start flask-api  # Iniciar el servicio de la API
        sleep 5  # Esperar a que la API se levante

    - name: Verificar que la API está corriendo
      run: |
        if curl --silent --fail http://localhost:8000; then
          echo "API levantada correctamente"
          echo "Flask API está en funcionamiento." > result.log  # Log del resultado
          exit 0
        else
          echo "Error al levantar la API Flask"
          echo "Error: No se pudo levantar la API." > result.log  # Log del error
          exit 1
        fi

    - name: Crear comentario en la PR
      if: success()  # Si la API se levantó correctamente
      run: |
        PR_NUMBER=$(curl -s https://api.github.com/repos/${{ github.repository }}/pulls?state=all  | jq -r '.[0].number')  # Obtén el número de la PR
        curl -X POST \
          -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          -d '{"body": "¡La API de Flask se ha levantado correctamente en el entorno de producción!"}' \
          https://api.github.com/repos/${{ github.repository }}/issues/${PR_NUMBER}/comments

    - name: Crear comentario de error en la PR y abrir una ISSUE
      if: failure()  # Si la API no se levanta correctamente
      run: |
        PR_NUMBER=$(curl -s https://api.github.com/repos/${{ github.repository }}/pulls?state=all  | jq -r '.[0].number')  # Obtén el número de la PR
        curl -X POST \
          -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          -d '{"body": "Error al levantar la API de Flask en el entorno de producción. Se ha abierto un ISSUE para solucionar el problema."}' \
          https://api.github.com/repos/${{ github.repository }}/issues/${PR_NUMBER}/comments
        curl -X POST \
          -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          -d '{"title": "Error al levantar la API de Flask en producción", "body": "La API de Flask no se ha levantado correctamente en el entorno de producción. Por favor, revisa el error y soluciona el problema.", "labels": ["bug"]}' \
          https://api.github.com/repos/${{ github.repository }}/issues