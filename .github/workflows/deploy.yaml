name: Deploy API Flask

on:
  push:
    branches:
      - main
    types: 
      - merged  # Se activa solo cuando se hace un merge en la rama main

jobs:
  deploy:
    runs-on: self-hosted  # Usar un runner self-hosted
    permissions:
      contents: read  # Permite leer los contenidos del repositorio
      pull-requests: write  # Permite interactuar con los pull requests

    steps:
    - name: Checkout código
      uses: actions/checkout@v2

    - name: Configurar Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.8'  # Ajustar a la versión de Python que necesitas

    - name: Instalar dependencias
      run: |
        python -m venv venv  # Crear un entorno virtual
        source venv/bin/activate  # Activar el entorno
        pip install --upgrade pip
        pip install -r requirements.txt  # Instalar las dependencias de Flask

    - name: Configurar variables de entorno
      run: |
        echo "FLASK_ENV=production" >> $GITHUB_ENV  # Establecer el entorno de Flask, si es necesario

    - name: Crear archivo de servicio systemd para Flask
      run: |
        echo "[Unit]
        Description=Flask API
        After=network.target
        
        [Service]
        User=brunolb  # Ajustar el usuario según sea necesario
        WorkingDirectory=$(pwd)/iacasa  # Usar el directorio donde se clonó el repositorio
        ExecStart=$(pwd)/iacasa/venv/bin/python $(pwd)/iacasa/app.py  # Ruta al archivo de la app
        Restart=always
        Environment=FLASK_ENV=production

        [Install]
        WantedBy=multi-user.target" | sudo tee /etc/systemd/system/flask-api.service > /dev/null

    - name: Iniciar el servicio Flask
      run: |
        sudo systemctl daemon-reload  # Recargar los servicios de systemd
        sudo systemctl enable flask-api.service  # Habilitar el servicio para que se inicie al arrancar
        sudo systemctl start flask-api.service  # Iniciar el servicio de Flask

    - name: Verificar que la API está corriendo
      run: |
        if curl --silent --fail http://localhost:5000; then
          echo "API levantada correctamente"
          echo "Flask API está en funcionamiento." > result.log  # Log del resultado
          exit 0
        else
          echo "Error al levantar la API Flask"
          echo "Error: No se pudo levantar la API." > result.log  # Log del error
          exit 1
        fi

    - name: Crear comentario en la PR
      if: success()  # Si la API se levantó correctamente
      run: |
        PR_NUMBER=$(curl -s https://api.github.com/repos/${{ github.repository }}/pulls?state=all  | jq -r '.[0].number')  # Obtén el número de la PR
        curl -X POST \
          -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          -d '{"body": "¡La API de Flask se ha levantado correctamente en el entorno de producción!"}' \
          https://api.github.com/repos/${{ github.repository }}/issues/${PR_NUMBER}/comments

    - name: Crear comentario de error en la PR y reabrirla
      if: failure()  # Si la API no se levanta correctamente
      run: |
        PR_NUMBER=$(curl -s https://api.github.com/repos/${{ github.repository }}/pulls?state=all | jq -r '.[0].number')  # Obtén el número de la PR
        curl -X POST \
          -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          -d '{"body": "¡Error! No se pudo levantar la API de Flask. Se reabrirá la PR para que sea revisada."}' \
          https://api.github.com/repos/${{ github.repository }}/issues/${PR_NUMBER}/comments
        curl -X PATCH \
          -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          -d '{"state": "open"}' \
          https://api.github.com/repos/${{ github.repository }}/pulls/${PR_NUMBER}  # Reabrir la PR
